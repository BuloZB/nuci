#!/bin/ash

#Copyright 2016,2017 CZ.NIC z.s.p.o. (http://www.nic.cz/)
#
#This file is part of NUCI configuration server.
#
#NUCI is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#NUCI is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with NUCI.  If not, see <http://www.gnu.org/licenses/>.

set -ex

SCRIPT="$0"
SCRIPT_DIR=$(dirname "$SCRIPT")/
CA_DIR=/etc/ssl/ca/

LOCKFILE=
CA=

do_restart() {
	[ '!' "$CA" ]
	[ '!' "$LOCKFILE" ]
	CA="$1"
	LOCKFILE="$2"
}

do_background() {
	"$SCRIPT" restart "$CA" "$LOCKFILE" "$@" </dev/null >/dev/null 2>&1 &
	trap '' HUP INT QUIT TERM EXIT
	exit 0
}

unlock() {
	if [ "$LOCKFILE" -a -f "$LOCKFILE" ] ; then
		rm "$LOCKFILE"
		LOCKFILE=
	fi
}

cleanup() {
	if [ "$CA" ] ; then
		rm -f "$CA_DIR"/"$CA"/generating
		CA=
	fi
	unlock
}

lock() {
	set -o noclobber
	echo $$ 2>/dev/null >"$1"
	LOCKFILE="$1"
	set +o noclobber
}

trap cleanup HUP INT QUIT TERM EXIT

do_switch() {
	cleanup
	cd "$CA_DIR"/"$1"
	lock "$CA_DIR"/"$1"/lock
	CA="$1"
}

do_new_ca() {
	mkdir -p "$CA_DIR"/"$1"
	touch "$CA_DIR"/"$1"/index.txt
	touch "$CA_DIR"/"$1"/notes.txt
	echo 01 >"$CA_DIR"/"$1"/serial
	echo 01 >"$CA_DIR"/"$1"/crlnumber
	do_switch "$1"
}

do_gen_crl() {
	openssl ca -gencrl -out ca.crl -config "$SCRIPT_DIR"/openssl.cnf
}

do_gen_ca() {
	[ "$CA" ] # Make sure we've chosen one
	[ '!' -f "ca.crt" ] # Make sure it is not yet created
	echo "-- root $CA" >generating
	echo "$CA" | openssl req -new -x509 -extensions v3_ca -keyout ca.key -out ca.crt -config "$SCRIPT_DIR"/openssl.cnf -nodes -days 3650
	chmod 0400 ca.key
	do_gen_crl
	rm generating
}

do_gen_dh() {
	echo 'dhparams' >generating
	openssl dhparam -out dhparam.pem 2048
	rm generating
}

do_gen_server() {
	[ "$CA" ] # Make sure we've chosen one
	echo "$(cat serial) server $1" >>notes.txt
	echo "server $1" >generating
	echo "$1" | openssl req -new -newkey rsa:4096 -keyout server-"$1".key -nodes -out server-"$1".csr -config "$SCRIPT_DIR"/openssl.cnf -extensions usr_server
	openssl ca -out server-"$1".crt -config "$SCRIPT_DIR"/openssl.cnf -batch -extensions usr_server -infiles server-"$1".csr
	chmod 0400 server-"$1".key
	do_gen_crl
	rm generating
}

do_gen_client() {
	[ "$CA" ] # Make sure we've chosen one
	echo "$(cat serial) client $1" >>notes.txt
	echo "client $1" >generating
	echo "$1" | openssl req -new -newkey rsa:4096 -keyout client-"$1".key -nodes -out client-"$1".csr -config "$SCRIPT_DIR"/openssl.cnf -extensions usr_client
	openssl ca -out client-"$1".crt -config "$SCRIPT_DIR"/openssl.cnf -batch -extensions usr_client -infiles client-"$1".csr
	chmod 0400 client-"$1".key
	do_gen_crl
	rm generating
}

do_drop_ca() {
	[ "$CA" != "$1" ] # Can't delete active CA
	unlock
	lock "$CA_DIR"/"$1"/lock
	rm -rf "$CA_DIR"/"$1"
	LOCKFILE=
}

do_refresh() {
	cd "$CA_DIR"
	ls | while read CA_NAME ; do
		do_switch "$CA_NAME"
		do_gen_crl
	done
}

while [ "$1" ] ; do
	CMD="$1"
	shift
	case "$CMD" in
		restart)
			do_restart "$1" "$2"
			shift 2
			;;
		background)
			do_background "$@"
			;;
		new_ca)
			do_new_ca "$1"
			shift
			;;
		gen_ca)
			do_gen_ca
			;;
		gen_dh)
			do_gen_dh
			;;
		gen_server)
			do_gen_server "$1"
			shift
			;;
		gen_client)
			do_gen_client "$1"
			shift
			;;
		switch)
			do_switch "$1"
			shift
			;;
		drop_ca)
			do_drop_ca "$1"
			shift
			;;
		refresh)
			do_refresh
			;;
	esac
done
