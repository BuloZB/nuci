Writing nuci plugins
====================

Nuci is just empty server, doing nothing. All the visible
functionality is implemented in lua plugins. The server just provides
support for the plugins.

Each plugin is a lua file in the `src/lua_plugins` directory. In the main
chunk of the file an „object“ should be created and registered it in
the server. Then the plugin takes care about part of the configuration
tree.

Any code shared between multiple plugins can be placed as a library in
`src/lua_lib`.

Anatomy of basic plugin file
----------------------------

This is how basic plugin (that does nothing) would look like:

  require("datastore");

  local datastore = datastore("test.yin");

  register_datastore_provider(datastore);

This imports the `datastore` library (which lives in `src/lua_lib`)
and creates a new datastore object. The `test.yin` is file describing
the model served by this plugin. The yin description is in subset of
the standard yin (RFC 6020), which is understood by nuci. Then the
datastore is registered in the server.

Members of the datastore
------------------------

The datastore, once created and registered, already provides some
functionality. However, such functionality is only for internal use,
by the datastore implementation itself.

Here are the member variables and methods of such datastore:

Useful member variables
~~~~~~~~~~~~~~~~~~~~~~~

model_file::
  File name of the model yin description, as passed to the
  constructor.
model_path::
  Full path to the model yin file. This is filled in by nuci in
  `register_datastore_provider`.
model_ns::
  The namespace of the model. Filled in by the
  `register_datastore_provider`.
model::
  The parsed XML document representing the model. Filled in by the
  `register_datastore_provider`.

Utility methods
~~~~~~~~~~~~~~~

schedule_commit(func)::
  Schedules the function `func` to be called once all the changes are
  prepared by all the plugins, to commit them to configuration. The
  function may be discarded by the datastore without being called, if
  some of the plugins report an error. In such case the changes are
  not to be applied. The function must not raise errors or return
  anything but `nil`. This is specially designed for the `set_config`
  method and makes no sense to be called elsewhere.
edit_config_ops(config, defop, deferr)::
  This function takes the config parameter of the `<edit-config/>`
  method and converts the description to sequence of operations on the
  current data to perform the required changes. The `defop` is the
  default operation of the netconf's method. Similarly, deferr is the
  default error handling (but this parameter is currently unused).
+
The returned operations is table of operation tables. Each operation
table contains following items:
+
  op;;
    The operation to perform.
  command_node;;
    Corresponding XML node in the `config` passed to the function,
    coming from the command parameter.
  model_node;;
    Corresponding XML node in the model description.
  config_node;;
    Corresponding XML node in the current configuration. This may be
    `nil` in case no corresponding node exists (eg. with operation
    `create`).
  note;;
    Optional note about the operation.
+
Possible values of the `op` are:
+
  enter;;
    Go one level deeper in the tree. The nodes describe where to go in
    the tree.
  leave;;
    Go one level up in the tree.
  create;;
    Create the desired node in the configuration. The `config_node`
    may be empty, the node to create is in `command_node`. Note that
    the node to create may contain sub-nodes. It is up to the caller
    to create them as well (there are not separate operations to
    create them).
  remove;;
    Remove a node, marked in the `config_node`.
+
If a node in the configuration should be replaced, pair of operations
(`remove` immediately followed by `create`) is produced, both having
`replace` in their note.
+
On error, the first result (the list of operations) is `nil`, the
second contains an error description. The error description should be
propagated up.
+
The third and fourth arguments are parsed XML documents (the current
configuration and the command sent by the user).
+
[WARNING]
You need to keep these documents in scope for as long as you use the
operations. If the documents are claimed by the garbage collector, the
element nodes inside the operations are invalidated. This may change
in future, but currently an element node needs its containing document
and it doesn't keep it alive.

Methods to be overriden by the implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are default implementations of several methods that do some
feasible version of nothing for the functionality of the data store
(for example, returning empty set of configuration). If the given
model should provide that part of functionality, it needs to override
the given method.

All bits of XML are passed encoded as strings here. Note that the
passed XML parts may be rootless ‒ for example this can be passed,
even if it's not valid XML document (it, however, can be part of valid
XML document).

  <data>
    <something/>
  </data>
  <more-data/>

get()::
  Return the state data (statistics) for the model, as bit of XML. If
  there's an error during the call, it should return `nil,
  error_description`. This should return it without the configuration
  data, if the `<get/>` netconf method is called, both `get()` and
  `get_config()` is called internally to form the answer.
get_config()::
  Similar to `get()`, but instead of state data, it should return the
  current content of configuration.
set_config(config, defop, deferr)::
  This implements the `<edit-config/>` netconf method. The `config` is
  the fragment of XML inside the `<config/>` parameter of the method,
  the part relevant to this data store (recognized by the namespace).
  The `defop` and `deferr` are the default operation and error
  handling specified by the parameters.
+
The method should apply the changes to some temporary place and
schedule a commit by `schedule_commit`, or return an error description
if it fails.
+
Usually, it would call `self:edit_config_ops` method to convert the
XML description to something more digestible, then pass the operations
and option descriptions to `applyops` to walk through them and
perform them. The `uci` library implicitly offers the temporary
storage (it needs to be `commit()` ed for changes to be saved). Be sure
to use the `get_uci_cursor()` function to get the cursor, as that one
is shared across the plugins, to avoid overwriting changes of other
plugins accidentally.

call(rpc)::
  This is called to handle a custom RPC call from client. The
  datastore to call it on is decided based on the namespace of the
  RPC. The whole RPC is passed as parameter. It expects the response
  to be returned as result.

commit()::
  Called when all the `set_config` methods on all the data stores were
  successfully called. This should store the changes into permanent
  storage. By default, it calls all the commit functions registered by
  `schedule_commit`. It can be overridden to replace this
  functionality (but then, schedule_commit` will not work).

rollback()::
  Called when one of the `set_config` method on some data store
  failed. It can be called on a data store even if no `set_config` was
  called on it yet. This is the place to discard changes scheduled for
  commit. The default implementation discards the functions scheduled
  by `schedule_commit`, but it can be overridden (probably together
  with `commit()`).

Useful functions
----------------

There are some useful functions in the library `nutils` (nuci utils).

find_node(parent_node, predicate)::
  Go through child nodes of the `parent_node` and apply predicate to
  each of them in order. Once the predicate returns true, return the
  current child node. If none returns true, return nil at the end.

find_node_name_ns(parent_node, name, ns)::
  Similar to the previous, but pass desired name and namespace of the
  node to match for equality.

split(string)::
  Split the string on whitespace into table of smaller strings.

dump_table(table)::
  Mostly debugging function. Writes the content of the table to the
  error output.

get_uci_cursor()::
  Get a global uci cursor that can be used to go through the config
  files. This respects the `NUCI_TEST_CONFIG_DIR` environment
  variable, which is used in several tests that use different place
  than `/etc/config` to store the files.

The `applyops(ops, description)` function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is another useful function, living in the `editconfig` library.
It helps going through the list of operations returned from the
`edit_config_ops` and choose the right operations to perform on them
based on description of the configuration options.

The description is recursive data structure. The top level is
description of a top-level configuration element. It is a table
containing description how the top-level element is configured.
There's also the `children` item ‒ a table containing list of elements
that may be present under the top-level one. Each child is described
the same way. The `children` item may be omitted if the element has no
possible sub-elements.

The only difference between the top-level description table and the
embedded ones is that the top-level one must contain a `namespace`
item, containing string ‒ namespace of the whole config model.

There are some callbacks that are called whenever something happens:

enter(operation)::
  Called when the traversal of the description enters the current one,
  with the operation that caused it. The operation is either an
  `enter` operation, or it may be `add-tree` or `remove-tree`. The
  operation is then done in this description. If omitted, nothing is
  called.
leave(operation)::
  The counter-part of `enter`.
create(node, operation)::
  This is called when a configuration corresponding to the description
  should be created. The XML element to be created is in `node`, the
  whole operation in `operation`. The callback can return an error
  description. If omitted, an error is assumed.
remove(node, operation)::
  The counter-part of create.
replace(node, operation_create, operation_remove)::
  If present and the pair of operations are remove and create caused
  by replacement in the command, it is called instead of `create` and
  `remove` callbacks. The node is the one to create. If omitted, usual
  remove-create pair of callbacks is called.

Any of the `create`, `remove` and `replace` may be replaced by an
error description, in which case it is used as if the callback
returned the error description.

Also, when a node is created or removed (or replaced), it can recurse
through the sub-nodes and call the operation on all the sub-nodes (and
they can enable recursing through their sub-nodes in return).

To enable recursion on some operation, set the item
`<operation>_recurse_<before|after>="<sub-operation>"`. The operation
is the one on the current node (for example `replace`). The recursion
is performed either before or after the current callback. The
sub-operation is the operation to be invoked on the sub-nodes, which
may be either `create` or `remove` (not `replace`).

It is possible to use both the `before` and `after` recursions, with
different operations (which is useful to recurse from `replace`
operation).

There may be other options to fine-tune the recursion:

<sub-operation>_recurse_skip::
  It contains list of strings. If an element name is present here, it
  does not visit such element recursively.
<sub-operation>_recurse_mandatory::
  A list of mandatory element names. For each name here, it checks
  that there's at least one element of such name. If not, it reports
  an error to the client with `data-missing` error tag.

The same name may be present in both these lists. In that case, it
does not descend to the elements of such name, but checks that at
least one is present. This may be useful, for example, for index
elements in list items. They must be present in the item, but they are
handled in the item itself.

Error descriptions
------------------

There are three ways how to return errors.

The first one is mostly a fallback mechanism. If the lua code crashes
(eg. by calling a variable containing `nil`), an error is generated,
containing the error string.

The second is returning string as the error description. In such case,
the string is taken as the error message, in an error of this form:

  <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1">
    <rpc-error>
      <error-type>application</error-type>
      <error-tag>operation-failed</error-tag>
      <error-severity>error</error-severity>
      <error-message>The error message</error-message>
    </rpc-error>
  </rpc-reply>

The last one is specifying the whole error, as a lua table. The table
should contain items with these names (not all of them must be
present):

msg::
  The error text (human readable description).
type::
  Value of the `error-type` element. Defaults to `application`.
tag::
  Value of the `error-tag` element, as defined by the netconf
  specification.
severity::
  Value of the `error-severity` element. Defaults to `error` and it
  should be probably left at that, since usual processing in `nuci` is
  aborted on any error reported, even if it is of severity `warning`.
app_tag::
  Value of the `app_tag` element.
path::
  Value of the `path` elemente.
info_badattr::
  Value of the `error-info/bad-attribute` element.
info_badelem::
  Value of the `error-info/bad-element` element.
info_badns::
  Value of the `error-info/bad-namespace` element.
info_sid::
  Value of the `error-info/sid` element.

Handling XML data
-----------------

Nuci contains a parser to a DOM tree. There are two functions to parse
XML, living in the `xmlwrap` package. They are
`xmlwrap.read_file(filename)` and `xmlwrap.read_memory(xml_data)`.
They differ in the source of data ‒ one takes a filename, the other a
string with XML data. They both return a XML document object.

Another option is using `xmlwrap.new_xml_doc(root_node_name)` or
`xmlwrap.new_xml_doc(root_node_name, namespace_href)` function.
This function creates new document and root node with `root_node_name`
name and (optionally) declares `namespace_href` and use it for root
node.

The only two methods on the document currently is `document:root()`,
which returns a node object, and `document:strdump()`, which returns
complete XML document represented by `document` as string.
The nodes are more rich:

node:first_child()::
  Returns the first child of the current node (may be `nil` if there
  are no children).
node:next()::
  Returns the next sibling. It is `nil` if this one is last.
node:iterate()::
  Returns the iterator function. It can be used to go through all the
  children of the node, like this:
+
  for child in node:iterate() do
    -- Do something
  end

node:parent()::
  Return the parent of the node (may be `nil`).
node:attribute(name, ns)::
  Get value of an attribute with given name and namespace. The `ns`
  parameter may be `nil`, in which case the attributes without
  namespace are taken.
node:name()::
  Return the name and namespace of the node.
node:text()::
  Return the text of the node. It aggregate all text and CDATA nodes and
  subnodes.
node:set_text(text)::
  Replace the text with some other. Function erases all text and
  CDATA nodes. Then creates new text node with requested content.
node:add_child(node_name, namespace_href)::
  Create new child of `node` named `node_name`. Optionally declares
  `namespace_href` and uses it for created node.
node:register_ns(namespace_href, namespace_prefix)::
  Declares new namespace `namespace_href` with given
  `namespace_prefix`. Places the declaration onto the `node`.
node:set_attribute(name, value, namespace_href)::
  Adds a new attribute or replaces an existing one. It may optionally
  live in a namespace (set `namespace_href` then). The namespace must
  be registered with `register_ns` on the `node` or any of its direct
  or indirect parents.
node:rm_attribute(name, namespace_href)::
  Remove node's attribute. If attribute is in namespace, call function
  with `namespace_href` parameter.
node:delete()::
  Delete the node and all children. Note that this invalidates the
  node and can't be used any more. If the node is used for iteration,
  then the iteration must be restarted. This is *broken*:
+
  for node in parent:iterate() do
    node:delete();
  end
